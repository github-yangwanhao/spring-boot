<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.yangwanhao.boot.exception.retry.demo.mapper.ExceptionTradeMapper" >
  <resultMap id="BaseResultMap" type="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTrade" >
    <id column="exception_id" property="exceptionId" jdbcType="VARCHAR" />
    <result column="error_code" property="errorCode" jdbcType="VARCHAR" />
    <result column="error_message" property="errorMessage" jdbcType="VARCHAR" />
    <result column="module_name" property="moduleName" jdbcType="VARCHAR" />
    <result column="retry_url" property="retryUrl" jdbcType="VARCHAR" />
    <result column="retry_http_method" property="retryHttpMethod" jdbcType="VARCHAR" />
    <result column="retry_times" property="retryTimes" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTrade" extends="BaseResultMap" >
    <result column="retry_param" property="retryParam" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    exception_id, error_code, error_message, module_name, retry_url, retry_http_method, 
    retry_times, remark, create_time, update_time
  </sql>
  <sql id="Blob_Column_List" >
    retry_param
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTradeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from exception_trade
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTradeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from exception_trade
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from exception_trade
    where exception_id = #{exceptionId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from exception_trade
    where exception_id = #{exceptionId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTradeExample" >
    delete from exception_trade
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTrade" >
    insert into exception_trade (exception_id, error_code, error_message, 
      module_name, retry_url, retry_http_method, 
      retry_times, remark, create_time, 
      update_time, retry_param)
    values (#{exceptionId,jdbcType=VARCHAR}, #{errorCode,jdbcType=VARCHAR}, #{errorMessage,jdbcType=VARCHAR}, 
      #{moduleName,jdbcType=VARCHAR}, #{retryUrl,jdbcType=VARCHAR}, #{retryHttpMethod,jdbcType=VARCHAR}, 
      #{retryTimes,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{retryParam,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTrade" >
    insert into exception_trade
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="exceptionId != null" >
        exception_id,
      </if>
      <if test="errorCode != null" >
        error_code,
      </if>
      <if test="errorMessage != null" >
        error_message,
      </if>
      <if test="moduleName != null" >
        module_name,
      </if>
      <if test="retryUrl != null" >
        retry_url,
      </if>
      <if test="retryHttpMethod != null" >
        retry_http_method,
      </if>
      <if test="retryTimes != null" >
        retry_times,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="retryParam != null" >
        retry_param,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="exceptionId != null" >
        #{exceptionId,jdbcType=VARCHAR},
      </if>
      <if test="errorCode != null" >
        #{errorCode,jdbcType=VARCHAR},
      </if>
      <if test="errorMessage != null" >
        #{errorMessage,jdbcType=VARCHAR},
      </if>
      <if test="moduleName != null" >
        #{moduleName,jdbcType=VARCHAR},
      </if>
      <if test="retryUrl != null" >
        #{retryUrl,jdbcType=VARCHAR},
      </if>
      <if test="retryHttpMethod != null" >
        #{retryHttpMethod,jdbcType=VARCHAR},
      </if>
      <if test="retryTimes != null" >
        #{retryTimes,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="retryParam != null" >
        #{retryParam,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTradeExample" resultType="java.lang.Integer" >
    select count(*) from exception_trade
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update exception_trade
    <set >
      <if test="record.exceptionId != null" >
        exception_id = #{record.exceptionId,jdbcType=VARCHAR},
      </if>
      <if test="record.errorCode != null" >
        error_code = #{record.errorCode,jdbcType=VARCHAR},
      </if>
      <if test="record.errorMessage != null" >
        error_message = #{record.errorMessage,jdbcType=VARCHAR},
      </if>
      <if test="record.moduleName != null" >
        module_name = #{record.moduleName,jdbcType=VARCHAR},
      </if>
      <if test="record.retryUrl != null" >
        retry_url = #{record.retryUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.retryHttpMethod != null" >
        retry_http_method = #{record.retryHttpMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.retryTimes != null" >
        retry_times = #{record.retryTimes,jdbcType=INTEGER},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.retryParam != null" >
        retry_param = #{record.retryParam,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update exception_trade
    set exception_id = #{record.exceptionId,jdbcType=VARCHAR},
      error_code = #{record.errorCode,jdbcType=VARCHAR},
      error_message = #{record.errorMessage,jdbcType=VARCHAR},
      module_name = #{record.moduleName,jdbcType=VARCHAR},
      retry_url = #{record.retryUrl,jdbcType=VARCHAR},
      retry_http_method = #{record.retryHttpMethod,jdbcType=VARCHAR},
      retry_times = #{record.retryTimes,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      retry_param = #{record.retryParam,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update exception_trade
    set exception_id = #{record.exceptionId,jdbcType=VARCHAR},
      error_code = #{record.errorCode,jdbcType=VARCHAR},
      error_message = #{record.errorMessage,jdbcType=VARCHAR},
      module_name = #{record.moduleName,jdbcType=VARCHAR},
      retry_url = #{record.retryUrl,jdbcType=VARCHAR},
      retry_http_method = #{record.retryHttpMethod,jdbcType=VARCHAR},
      retry_times = #{record.retryTimes,jdbcType=INTEGER},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTrade" >
    update exception_trade
    <set >
      <if test="errorCode != null" >
        error_code = #{errorCode,jdbcType=VARCHAR},
      </if>
      <if test="errorMessage != null" >
        error_message = #{errorMessage,jdbcType=VARCHAR},
      </if>
      <if test="moduleName != null" >
        module_name = #{moduleName,jdbcType=VARCHAR},
      </if>
      <if test="retryUrl != null" >
        retry_url = #{retryUrl,jdbcType=VARCHAR},
      </if>
      <if test="retryHttpMethod != null" >
        retry_http_method = #{retryHttpMethod,jdbcType=VARCHAR},
      </if>
      <if test="retryTimes != null" >
        retry_times = #{retryTimes,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="retryParam != null" >
        retry_param = #{retryParam,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where exception_id = #{exceptionId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTrade" >
    update exception_trade
    set error_code = #{errorCode,jdbcType=VARCHAR},
      error_message = #{errorMessage,jdbcType=VARCHAR},
      module_name = #{moduleName,jdbcType=VARCHAR},
      retry_url = #{retryUrl,jdbcType=VARCHAR},
      retry_http_method = #{retryHttpMethod,jdbcType=VARCHAR},
      retry_times = #{retryTimes,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      retry_param = #{retryParam,jdbcType=LONGVARCHAR}
    where exception_id = #{exceptionId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.yangwanhao.boot.exception.retry.demo.model.ExceptionTrade" >
    update exception_trade
    set error_code = #{errorCode,jdbcType=VARCHAR},
      error_message = #{errorMessage,jdbcType=VARCHAR},
      module_name = #{moduleName,jdbcType=VARCHAR},
      retry_url = #{retryUrl,jdbcType=VARCHAR},
      retry_http_method = #{retryHttpMethod,jdbcType=VARCHAR},
      retry_times = #{retryTimes,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where exception_id = #{exceptionId,jdbcType=VARCHAR}
  </update>
</mapper>